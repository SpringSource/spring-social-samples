task prefixNewMigrations() {
    fileTree(dir: 'src/main/resources/db/migration').exclude({ isFilePrefixed(it.file) || isFileRepeatable(it.file) }).each { file ->
        doLast {
            def timestamp = new Date().format('yyyyMMddHHmmssSSS', TimeZone.getTimeZone('GMT'))

            println "Renaming $file.name to V${timestamp}__$file.name"

            file.renameTo("$file.parentFile.absolutePath$file.separator" + "V${timestamp}__$file.name")

            // Sleep for a moment to avoid prefix conflicts when renaming multiple files
            sleep(1*1000)
        }
    }
}

def isFilePrefixed(file) {
    // DEBUG
    // println "isFilePrefixed "+ (file.name ==~ /^V\d+__.*\.sql$/) + " " + (file.name ==~ /^.*\.txt/)
    return (file.name ==~ /^V\d+__.*\.sql$/) || (file.name ==~ /^.*\.txt/)
}

def isFileRepeatable(file) {
    // DEBUG
    // println "isFileRepeatable" + (file.name ==~ /^R__.*\.sql$/) + " " + (file.name ==~ /^R__.*\.txt/)
    return (file.name ==~ /^R__.*\.sql$/) || (file.name ==~ /^R__.*\.txt/)
}

build.dependsOn prefixNewMigrations
bootRun.dependsOn prefixNewMigrations
compileJava.dependsOn prefixNewMigrations